using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace MentorBilling.Miscellaneous
{
    public class Encryption
    {
        /// <summary>
        /// the main encryption service
        /// </summary>
        private readonly TripleDESCryptoServiceProvider cryptoService = new TripleDESCryptoServiceProvider();

        /// <summary>
        /// the main byte encoding for the encryption service
        /// </summary>
        private readonly UTF8Encoding encoding = new UTF8Encoding();

        /// <summary>
        /// the main encryption function for any given string
        /// </summary>
        /// <param name="text">the given string to be encrypted</param>
        /// <returns>the encrypted text</returns>
        public String Encrypt(String text)
        {
            #region key and vector lenght generating 
            //the main encryption key
            Byte[] key = new Byte[24];
            //the vector lenght
            Byte[] lenghtVector = new Byte[8];
            //the main randomEncryption generator
            RNGCryptoServiceProvider randomGenerator = new RNGCryptoServiceProvider();
            //we use the generator to get a new series of bytes for the key
            randomGenerator.GetBytes(key);
            //and for the Lenght Vector
            randomGenerator.GetBytes(lenghtVector);
            //then we set the newly generated byte arrays to the properties of the cryptoService
            cryptoService.Key = key;
            cryptoService.IV = lenghtVector;
            #endregion

            //we return the newly generated  encryption based on the key and the iv
            return Convert.ToBase64String(cryptoService.Key) + Convert.ToBase64String(Transform(encoding.GetBytes(text), cryptoService.CreateEncryptor(cryptoService.Key, cryptoService.IV))) +
                    Convert.ToBase64String(cryptoService.IV);
        }

        /// <summary>
        /// the main decryption function for any given string
        /// </summary>
        /// <param name="encryptedText">the main encrypted text</param>
        /// <returns>the original string</returns>
        public String Decrypt(String encryptedText)
        {
            //we attempt to decrypt the given text
            try
            {
                return encoding.GetString(Transform(Convert.FromBase64String(encryptedText.Substring(32, encryptedText.Length - 44)),
                        cryptoService.CreateDecryptor(Convert.FromBase64String(encryptedText.Substring(0, 32)),
                        Convert.FromBase64String(encryptedText.Substring(encryptedText.Length - 12)))));
            }
            catch (Exception)
            {
                //in case of failiure we return an empty String
                return String.Empty;
            }
        }

        /// <summary>
        /// this procedure alters a given byte array
        /// </summary>
        /// <param name="input">the given byte array</param>
        /// <param name="cryptoTransform">the cryptoTransformer</param>
        /// <returns>the newly transformed string</returns>
        public Byte[] Transform(Byte[] input, ICryptoTransform cryptoTransform)
        {
            //if the byte array is empty we return an empty byte array
            if (input.Length <= 0) return new Byte[] { 0 };
            //we generate a new Memory Stream
            MemoryStream memoryStream = new MemoryStream();
            //and a new Crypto Stream
            CryptoStream cryptoStream = new CryptoStream(memoryStream, cryptoTransform, CryptoStreamMode.Write);
            //we write the input into the stream and remove the final block
            cryptoStream.Write(input, 0, input.Length);
            cryptoStream.FlushFinalBlock();
            //before positioning ourselves at the start of the stream
            memoryStream.Position = 0;
            //then we dump the memory stram into the result
            Byte[] result = memoryStream.ToArray();
            //before closing all streams and returning the result
            cryptoStream.Close();
            memoryStream.Close();
            return result;
        }

        /// <summary>
        /// this function will reencrypt the value till we get a good value
        /// </summary>
        /// <param name="value">the given value</param>
        /// <returns>the encrypted value</returns>
        public String GetValidEncryption(String value)
        {
            //the original encryption
            String encryptedValue;
            //we encrypt the value
            do
            {
                encryptedValue = Encrypt(value);
            } while (encryptedValue.Contains("\\") || encryptedValue.Contains("/"));
            //until it no longer contains \ or /
            return encryptedValue;
        }
    }
}
